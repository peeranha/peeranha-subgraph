type User @entity {
  id: ID!
  ratings: [UserCommunityRating!]
  displayName: String
  postCount: Int
  replyCount: Int
  company: String
  position: String
  location: String
  about: String
  avatar: String
  creationTime: BigInt
  ipfsHash: Bytes
  ipfsHash2: Bytes
  followedCommunities: [String!]
  achievements: [Achievement!]
}

type UserCommunityRating @entity {
  id: ID!
  communityId: Int
  rating: Int
  user: User
}

type UserPermission @entity {
  id: ID!
  user: User
  permission: Bytes
}

type Community @entity {
  id: ID!
  name: String
  description: String
  website: String
  communitySite: String
  language: String
  avatar: String
  isFrozen: Boolean
  creationTime: BigInt
  postCount: Int
  deletedPostCount: Int
  replyCount: Int
  tagsCount: Int
  followingUsers: Int
  ipfsHash: Bytes
  ipfsHash2: Bytes
}

type Tag @entity {
  id: ID!
  communityId: BigInt
  name: String
  description: String
  postCount: Int
  deletedPostCount: Int
  ipfsHash: Bytes
  ipfsHash2: Bytes
}

enum PostType {
  ExpertPost
  CommonPost
  Tutorial
  Documentation
}

type _Schema_
@fulltext(
  name: "postSearch"
  language: en
  algorithm: rank
  include: [{entity: "Post", fields: [{ name: "title" }, { name: "content"}, { name: "postContent"}]}]        
)

type Post @entity {
  id: ID!
  ipfsHash: Bytes
  ipfsHash2: Bytes
  postType: Int
  author: User!
  rating: Int
  postTime: BigInt
  lastmod: BigInt
  communityId: BigInt!
  title: String
  content: String
  postContent: String
  commentCount: Int
  replyCount: Int
  isDeleted: Boolean
  officialReply: Int
  bestReply: Int
  isFirstReply: Boolean
  isQuickReply: Boolean
  properties: [BigInt!]
  replies: [Reply!]
  comments: [Comment!]
  tags: [Tag!]
  handle: String
  messengerType: Int
}

type Reply @entity {
  id: ID!
  ipfsHash: Bytes
  ipfsHash2: Bytes
  author: User!
  rating: Int
  postTime: BigInt
  postId: BigInt
  parentReplyId: Int
  content: String
  commentCount: Int
  isDeleted: Boolean
  isOfficialReply: Boolean
  isBestReply: Boolean
  isFirstReply: Boolean
  isQuickReply: Boolean
  properties: [Bytes!]
  comments: [Comment!]
  handle: String
  messengerType: Int
}

type Comment @entity {
  id: ID!
  ipfsHash: Bytes
  ipfsHash2: Bytes
  author: User!
  rating: Int
  postTime: BigInt
  postId: BigInt
  parentReplyId: Int
  content: String
  isDeleted: Boolean
  properties: [Bytes!]
}

type Achievement @entity {
  id: ID!
  factCount: BigInt
  maxCount: BigInt
  achievementURI: String
  achievementsType: Int
  name: String
  description: String
  image: String
  communityId: BigInt
  atrCommunityId: String
  atrEvent: String
  atrType: String
}

type UserReward @entity {
  id: ID!
  period: Period
  user: User
  tokenToReward: BigInt
  isPaid: Boolean
}

type Period @entity {
  id: ID!
  startPeriodTime: BigInt
  endPeriodTime: BigInt
  isFinished: Boolean
}

type ContractInfo @entity {
  id: ID!
  deployTime: BigInt
  periodLength: BigInt
  lastUpdatePeriod: Int
}

type History @entity {
  id: ID!
  transactionHash: Bytes
  post: Post
  reply: Reply
  comment: Comment
  eventEntity: String
  eventName: String
  actionUser: User
  timeStamp: BigInt
}

type CommunityDocumentation @entity {
  id: ID!
  documentationJSON: String
  ipfsHash: Bytes
}
